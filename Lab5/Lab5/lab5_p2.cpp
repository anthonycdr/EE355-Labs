#include <iostream>#include <fstream>#include <cstdlib> // for atoiusing namespace std;// Function to extract and display command-line arguments using pointer-to-pointervoid extractCommandLineArgs(int argc, char** argv, ofstream &outputfile) {    outputfile <<"Extracted Command-Line Arguments:" << endl;    for (int i = 0; i < argc; i++){        outputfile << "  - argv[" << i << "] = " << *(argv + i) << endl;    }    outputfile << endl;}// Function to swap two integers using pass-by-value (no effect)void swapByValue(int a, int b) {    int t = a;    a = b;    b = t;}// Function to swap two integers using pass-by-reference (modifies values)void swapByReference(int &a, int &b) {    int t = a;    a = b;    b = t;}// Function to modify array: Double each value (using pass-by-pointer)void doubleValues(int* arr, int size) {    for (int i = 0; i < size; i++) {        *(arr + i) *= 2;    }}// Function to compute sum and product using pass-by-referencevoid computeSumAndProduct(int* arr, int size, int &sum, int &product) {    sum = 0;    product = 1;    for (int i = 0; i < size; i++) {        sum += *(arr + i);        product *= *(arr + i);    }}// Function to reverse an array using pointers (without array indexing)void reverseArray(int* arr, int size) {    int *f = arr;    int *b = arr + size - 1;    while (f < b) {        int t = *f;        *f = *b;        *b = t;        f++;        b--;    }}int main(int argc, char* argv[]) {     // Convert command-line arguments to integers    int size = argc - 1;    int* num = new int[size];    for (int i = 0; i < size; i++) {        *(num + i) = atoi(*(argv + i + 1));    }        // Open output file    ofstream outputfile ("output_Q2.txt");    outputfile << "Original num: ";    for (int i = 0; i < size; i++) {        outputfile << *(num + i) << " ";    }    outputfile << "\n\n";        // Extract command-line arguments using pointer-to-pointer    // extractCommandLineArgs(); // Fill in the arguments       extractCommandLineArgs(argc, argv, outputfile);        // Print original array    // Demonstrate pass-by-value (no effect)        // swapByValue(); // Fill in the arguments    swapByValue(*num, *(num + 1));    outputfile << "Pass-by-Value Swap (No Effect):\n  - Swap(" << *num << ", " << *(num + 1) << ") -> a = " << *num << ", b = " << *(num + 1)<< " (Unchanged)\n\n";    // Demonstrate pass-by-reference (modifies values)    // swapByReference(); // Fill in the arguments    swapByReference(*num, *(num + 1));    outputfile << "Pass-by-Reference Swap (Successful):\n  - Swap(" << *(num + 1) << ", " << *num << ") -> a = " << *num + 1 << ", b = " << *(num + 1) << "\n\n";        // Modify array (double values using pointer)    // doubleValues(); // Fill in the arguments    doubleValues(num, size);    outputfile << "Pass-by-Pointer Modification:\n  - Doubled Values: ";    for (int i = 0; i < size; i++) {        outputfile << *(num + i) << " ";    }    outputfile << "\n\n";    // Compute sum and product    // computeSumAndProduct(); // Fill in the arguments        int sum, product;    computeSumAndProduct(num, size, sum, product);    outputfile << "Sum of numbers: " << sum << endl;    outputfile << "Product of numbers: " << product << "\n\n";    // Reverse array    // reverseArray(); // Fill in the arguments        reverseArray(num, size);    outputfile << "Reversed Order: ";    for (int i = 0; i < size; i++) {        outputfile << *(num + i) << " ";    }    outputfile << "\n";        outputfile.close();    delete[] num;    return 0;}        